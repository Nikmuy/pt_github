version: '3.8'
x-postgres-common:
  &postgres-common
  image: postgres:14-alpine
  user: ${DB_USER}
  restart: always
  healthcheck:
    test: 'pg_isready -U postgres --dbname=pt_db'
    interval: 10s
    timeout: 5s
    retries: 5

services:
  bot:
    container_name: bot_container
    image: bot_image
    env_file:
      - .env

  database:
    <<: *postgres-common
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    command: |
      postgres
      -c wal_level=replica
      -c hot_standby=on
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c hot_standby_feedback=on
      -c log_replication_commands=on
    container_name: db_container
    image: db_image
    env_file:
      - .env

  database_replica:
    <<: *postgres-common
    container_name: db_repl_container
    image: db_repl_image
    ports:
      - "5433:5432"
    environment:
      PGUSER: ${DB_REPL_USER}
      PGPASSWORD: ${DB_REPL_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    command: |
      bash -c "
      log_directory=/var/log/postgres/
      log_filename=postgres.log
      logging_collector=on
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=database -W  --verbose -P
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    env_file:
      - .env
    depends_on:
      - database
